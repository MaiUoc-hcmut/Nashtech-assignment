@using Ecommerce.SharedViewModel.Responses
@model GetAllProductsResponse

@{
    ViewData["Title"] = "Products";
}

<div class="container mt-4">
    <h1 class="mb-4">Products</h1>

    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h4 class="mb-0">Filters</h4>
                </div>
                <div class="card-body">
                    <form id="filter-form" method="get">
                        <!-- Price Range Slider -->
                        <div class="filter-group mb-4">
                            <h5 class="filter-title mb-3">Price Range</h5>
                            <div class="mb-2">
                                <div class="range-slider">
                                    <input type="range" class="form-range" id="priceRangeMin" min="0" max="1000000" step="1000" value="@(ViewBag.MinPrice ?? 0)">
                                    <input type="range" class="form-range" id="priceRangeMax" min="0" max="1000000" step="1000" value="@(ViewBag.MaxPrice ?? 1000000)">
                                </div>
                                <div class="row mt-3">
                                    <div class="col-6">
                                        <div class="input-group">
                                            <input type="number" class="form-control" id="minPrice" name="minPrice" value="@(ViewBag.MinPrice ?? 0)" min="0" max="1000000" step="1000">
                                            <span class="input-group-text">đ</span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="input-group">
                                            <input type="number" class="form-control" id="maxPrice" name="maxPrice" value="@(ViewBag.MaxPrice ?? 1000000)" min="0" max="1000000" step="1000">
                                            <span class="input-group-text">đ</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Rating Slider -->
                        <div class="filter-group mb-4">
                            <h5 class="filter-title mb-3">Rating</h5>
                            <div class="mb-2">
                                <div class="range-slider">
                                    <input type="range" class="form-range" id="ratingRangeMin" min="0" max="5" step="0.5" value="@(ViewBag.MinRating ?? 0)">
                                    <input type="range" class="form-range" id="ratingRangeMax" min="0" max="5" step="0.5" value="@(ViewBag.MaxRating ?? 5)">
                                </div>
                                <div class="row mt-3">
                                    <div class="col-6">
                                        <div class="input-group">
                                            <input type="number" class="form-control" id="minRating" name="minRating" value="@(ViewBag.MinRating ?? 0)" min="0" max="5" step="0.5">
                                            <span class="input-group-text">★</span>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="input-group">
                                            <input type="number" class="form-control" id="maxRating" name="maxRating" value="@(ViewBag.MaxRating ?? 5)" min="0" max="5" step="0.5">
                                            <span class="input-group-text">★</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Special Filters -->
                        <div class="filter-group mb-4">
                            <h5 class="filter-title mb-3">Special</h5>
                            <div class="form-check mb-2">
                                <input class="form-check-input special-filter" type="checkbox" value="true" id="isNew" name="isNew" @(ViewBag.IsNew == true ? "checked" : "")>
                                <label class="form-check-label" for="isNew">New Arrivals</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input special-filter" type="checkbox" value="true" id="isBestSeller" name="isBestSeller" @(ViewBag.IsBestSeller == true ? "checked" : "")>
                                <label class="form-check-label" for="isBestSeller">Best Sellers</label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Apply Filters</button>
                            <a href="@Url.Action("Products", "Shop")" class="btn btn-outline-secondary">Clear All</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="col-lg-9">
            <!-- Sort Options -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <span class="me-2">Showing @Model.Products.Count() product(s)</span>
                </div>
                <div class="d-flex align-items-center">
                    <label for="sortOrder" class="me-2">Sort by:</label>
                    <select id="sortOrder" name="sortOrder" class="form-select form-select-sm" style="width: auto;">
                    </select>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="products-container">
                @if (Model.Products.Any())
                {
                    @foreach (var product in Model.Products)
                    {
                        <div class="col">
                            <partial name="_ProductCardPartial" model='new {
                                Id = product.Id,
                                Rating = product.AverageRating,
                                Reviews = product.TotalReviews,
                                IsNew = (DateTime.UtcNow - product.CreatedAt).TotalDays <= 7,
                                IsBestSeller = true,
                                Image = product.ImageUrl,
                                Name = product.Name,
                                Price = product.Price,
                            }'/>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="alert alert-info text-center p-5">
                            <i class="bi bi-exclamation-circle fs-1 mb-3"></i>
                            <h4>No products found</h4>
                            <p>Try adjusting your filter criteria or browse our categories.</p>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-5">
                    <ul class="pagination justify-content-center">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Products", new { page = ViewBag.CurrentPage - 1, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, minRating = ViewBag.MinRating, maxRating = ViewBag.MaxRating, isNew = ViewBag.IsNew, isBestSeller = ViewBag.IsBestSeller, sortOrder = ViewBag.SortOrder })" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Products", new { page = i, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, minRating = ViewBag.MinRating, maxRating = ViewBag.MaxRating, isNew = ViewBag.IsNew, isBestSeller = ViewBag.IsBestSeller, sortOrder = ViewBag.SortOrder })">@i</a>
                            </li>
                        }

                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Products", new { page = ViewBag.CurrentPage + 1, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, minRating = ViewBag.MinRating, maxRating = ViewBag.MaxRating, isNew = ViewBag.IsNew, isBestSeller = ViewBag.IsBestSeller, sortOrder = ViewBag.SortOrder })" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a class="page-link" href="#" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Price slider functionality
            const priceMinSlider = document.getElementById('priceRangeMin');
            const priceMaxSlider = document.getElementById('priceRangeMax');
            const priceMinInput = document.getElementById('minPrice');
            const priceMaxInput = document.getElementById('maxPrice');

            priceMinSlider.addEventListener('input', function() {
                if (parseInt(priceMinSlider.value) > parseInt(priceMaxSlider.value)) {
                    priceMinSlider.value = priceMaxSlider.value;
                }
                priceMinInput.value = priceMinSlider.value;
                updateRangeStyles();
            });

            priceMaxSlider.addEventListener('input', function() {
                if (parseInt(priceMaxSlider.value) < parseInt(priceMinSlider.value)) {
                    priceMaxSlider.value = priceMinSlider.value;
                }
                priceMaxInput.value = priceMaxSlider.value;
                updateRangeStyles();
            });

            priceMinInput.addEventListener('change', function() {
                if (parseInt(priceMinInput.value) > parseInt(priceMaxInput.value)) {
                    priceMinInput.value = priceMaxInput.value;
                }
                priceMinSlider.value = priceMinInput.value;
                updateRangeStyles();
            });

            priceMaxInput.addEventListener('change', function() {
                if (parseInt(priceMaxInput.value) < parseInt(priceMinInput.value)) {
                    priceMaxInput.value = priceMinInput.value;
                }
                priceMaxSlider.value = priceMaxInput.value;
                updateRangeStyles();
            });

            // Rating slider functionality
            const ratingMinSlider = document.getElementById('ratingRangeMin');
            const ratingMaxSlider = document.getElementById('ratingRangeMax');
            const ratingMinInput = document.getElementById('minRating');
            const ratingMaxInput = document.getElementById('maxRating');

            ratingMinSlider.addEventListener('input', function() {
                if (parseFloat(ratingMinSlider.value) > parseFloat(ratingMaxSlider.value)) {
                    ratingMinSlider.value = ratingMaxSlider.value;
                }
                ratingMinInput.value = ratingMinSlider.value;
                updateRangeStyles();
            });

            ratingMaxSlider.addEventListener('input', function() {
                if (parseFloat(ratingMaxSlider.value) < parseFloat(ratingMinSlider.value)) {
                    ratingMaxSlider.value = ratingMinSlider.value;
                }
                ratingMaxInput.value = ratingMaxSlider.value;
                updateRangeStyles();
            });
            
            ratingMinInput.addEventListener('change', function() {
                if (parseFloat(ratingMinInput.value) > parseFloat(ratingMaxInput.value)) {
                    ratingMinInput.value = ratingMaxInput.value;
                }
                ratingMinSlider.value = ratingMinInput.value;
                updateRangeStyles();
            });

            ratingMaxInput.addEventListener('change', function() {
                if (parseFloat(ratingMaxInput.value) < parseFloat(ratingMinInput.value)) {
                    ratingMaxInput.value = ratingMinInput.value;
                }
                ratingMaxSlider.value = ratingMaxInput.value;
                updateRangeStyles();
            });

            // Handle sort order change
            $('#sortOrder').change(function() {
                $('#filter-form').append('<input type="hidden" name="sortOrder" value="' + $(this).val() + '">');
                $('#filter-form').submit();
            });

            // Add some custom CSS for the range sliders
            $('<style>').text(`
                .range-slider {
                    position: relative;
                    width: 100%;
                    height: 40px;
                }
                
                .range-slider input[type="range"] {
                    position: absolute;
                    width: 100%;
                    pointer-events: none;
                    -webkit-appearance: none;
                    z-index: 2;
                    height: 10px;
                    opacity: 0;
                }
                
                .range-slider input[type="range"]::-moz-range-thumb {
                    pointer-events: all;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    border: 2px solid #ffffff;
                    background-color: #0d6efd;
                    box-shadow: 0 0 5px rgba(0,0,0,0.3);
                    cursor: pointer;
                    z-index: 3;
                }
                
                .range-slider input[type="range"]::-ms-thumb {
                    pointer-events: all;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    border: 2px solid #ffffff;
                    background-color: #0d6efd;
                    box-shadow: 0 0 5px rgba(0,0,0,0.3);
                    cursor: pointer;
                    z-index: 3;
                }
                
                .range-slider input[type="range"]::-webkit-slider-thumb {
                    pointer-events: all;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    border: 2px solid #ffffff;
                    background-color: #0d6efd;
                    box-shadow: 0 0 5px rgba(0,0,0,0.3);
                    -webkit-appearance: none;
                    cursor: pointer;
                    z-index: 3;
                }
                
                .range-slider:before {
                    content: "";
                    position: absolute;
                    z-index: 1;
                    left: 0;
                    right: 0;
                    top: 50%;
                    transform: translateY(-50%);
                    height: 5px;
                    border-radius: 5px;
                    background: #e0e0e0;
                }
                
                .range-slider:after {
                    position: absolute;
                    z-index: 1;
                    left: var(--range-min);
                    right: calc(100% - var(--range-max));
                    top: 50%;
                    transform: translateY(-50%);
                    height: 5px;
                    background: #0d6efd;
                    content: "";
                }
            `).appendTo('head');

            // Initialize the custom CSS variables for the range sliders
            function updateRangeStyles() {
                const priceTotal = priceMaxSlider.max - priceMinSlider.min;
                const priceMinPct = ((priceMinSlider.value - priceMinSlider.min) / priceTotal) * 100;
                const priceMaxPct = ((priceMaxSlider.value - priceMinSlider.min) / priceTotal) * 100;
                
                const ratingTotal = ratingMaxSlider.max - ratingMinSlider.min;
                const ratingMinPct = ((ratingMinSlider.value - ratingMinSlider.min) / ratingTotal) * 100;
                const ratingMaxPct = ((ratingMaxSlider.value - ratingMinSlider.min) / ratingTotal) * 100;
                
                $('.range-slider').eq(0).css('--range-min', priceMinPct + '%').css('--range-max', priceMaxPct + '%');
                $('.range-slider').eq(1).css('--range-min', ratingMinPct + '%').css('--range-max', ratingMaxPct + '%');
            }
            
            // Initial update of range styles
            updateRangeStyles();
        });
    </script>
}