@using Ecommerce.SharedViewModel.Responses
@using Newtonsoft.Json
@using System.Text.Json

@using Ecommerce.ClientMVC.Interface
@inject IAuthService AuthService


@{
    ViewData["Title"] = "Chi tiết sản phẩm";
}
@model ProductDetail

<link rel="stylesheet" href="~/css/product-detail.css" />

<div class="breadcrumb">
    <a href="/">Trang chủ</a> / 
    <a href="/danh-muc/ao-thun">Áo thun</a> / 
    <span>Áo Thun Nam Cotton 220GSM</span>
</div>

<div class="product-detail-container">
    <!-- Product Images Section -->
    <div class="product-images">
        <div class="main-image-container">
            <img id="main-image" src="@Model.ImageUrl" alt="Áo Thun Nam Cotton 220GSM" class="main-image">
            <span class="badge badge-hot">ĐÁNG MUA</span>
        </div>
    </div>

    <!-- Product Info Section -->
    <div class="product-info">
        <h1 class="product-title">@Model.Name</h1>
        
        <div class="product-rating">
            <span class="star">★★★★★</span>
            <span class="rating-score">@Model.AverageRating</span>
            <span class="reviews-count">(@Model.ReviewDetails.TotalReviews đánh giá)</span>
            <span class="sold-count">Đã bán @Model.TotalOrders</span>
        </div>
        
        <div class="product-price">
            <span class="current-price">@Model.Price đ</span>
        </div>
        
        <div class="promotion-section">
            <div class="promotion-header">
                <i class="fas fa-gift"></i>
                <span>Ưu đãi</span>
            </div>
            <div class="promotion-content">
                <div class="promotion-item">
                    <div class="promotion-tag">TẶNG 01 SET THUN/SHORTS ĐƠN TỪ 500K</div>
                </div>
                <div class="promotion-item">
                    <div class="promotion-tag">GIẢM 20K CHO ĐƠN TỪ 299K</div>
                </div>
            </div>
        </div>
        
        <div class="product-colors">
            <div class="option-label">Màu sắc:</div>
            <div class="color-options">
                @foreach (var color in Model.Colors)
                {
                    <div 
                        class="color-option" 
                        id="@color.Id" 
                        data-color="@color.Name" 
                        data-sizes="@Newtonsoft.Json.JsonConvert.SerializeObject(color.Sizes)"
                        style="background-color: rgb(0,0,0);"
                    ></div>
                }
            </div>
            <div class="selected-color">Đã chọn: <span></span></div>
        </div>
        
        <div class="product-sizes">
            <div class="option-label">Kích thước:</div>
            <div class="size-options">
            </div>
            <div class="selected-size">Đã chọn: <span></span></div>
        </div>
        
        <div class="product-quantity">
            <div class="option-label">Số lượng:</div>
            <div class="quantity-selector">
                <button class="quantity-btn decrease">-</button>
                <input type="number" class="quantity-input" value="1" min="1" max="99">
                <button class="quantity-btn increase">+</button>
            </div>
            <div class="stock-info">Còn 98 sản phẩm</div>
        </div>
        
        <div class="action-buttons">
            @{
                var cartId = AuthService.GetCurrentUser()?.CartId;
                var isAuthenticated = await AuthService.IsAuthenticated();
                <button type="submit" class="add-to-cart-btn">
                    <input type="hidden" id="cartId" value="@cartId" />
                    <input type="hidden" id="variantIdInput" value="" />
                    <input type="hidden" id="isAuthenticated" value="@isAuthenticated" />
                    <i class="fas fa-shopping-cart"></i>
                    Thêm vào giỏ
                </button>
            }
            <button class="buy-now-btn">Mua ngay</button>
        </div>
    </div>
</div>

<!-- Product Details Tabs -->
<div class="product-details-tabs">
    <div class="tabs-header">
        <div class="tab-item active" data-tab="description">Mô tả sản phẩm</div>
        <div class="tab-item" data-tab="details">Chi tiết</div>
        <div class="tab-item" data-tab="reviews">Đánh giá (@Model.ReviewDetails.TotalReviews)</div>
    </div>
    
    <div class="tabs-content">
        <div class="tab-content active" id="description">
            @Model.Description
        </div>
        
        <div class="tab-content" id="details">
            <div class="size-guide">
                <h3>Bảng kích thước</h3>
                <table class="size-chart">
                    <thead>
                        <tr>
                            <th>Kích thước</th>
                            <th>Vai (cm)</th>
                            <th>Ngực (cm)</th>
                            <th>Dài (cm)</th>
                            <th>Cân nặng (kg)</th>
                            <th>Chiều cao (cm)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>S</td>
                            <td>42</td>
                            <td>94</td>
                            <td>65</td>
                            <td>50-60</td>
                            <td>160-170</td>
                        </tr>
                        <tr>
                            <td>M</td>
                            <td>44</td>
                            <td>98</td>
                            <td>67</td>
                            <td>60-70</td>
                            <td>165-175</td>
                        </tr>
                        <tr>
                            <td>L</td>
                            <td>46</td>
                            <td>102</td>
                            <td>69</td>
                            <td>70-80</td>
                            <td>170-180</td>
                        </tr>
                        <tr>
                            <td>XL</td>
                            <td>48</td>
                            <td>106</td>
                            <td>71</td>
                            <td>80-90</td>
                            <td>175-185</td>
                        </tr>
                        <tr>
                            <td>XXL</td>
                            <td>50</td>
                            <td>110</td>
                            <td>73</td>
                            <td>90-100</td>
                            <td>180-190</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tab-content" id="reviews">
            <div class="review-summary">
                <div class="review-score">
                    <div class="average-score">@Model.AverageRating</div>
                    <div class="star-rating">★★★★★</div>
                    <div class="total-reviews">@Model.ReviewDetails.TotalReviews đánh giá</div>
                </div>
                <div class="rating-bars">
                    <div class="rating-bar">
                        <span class="rating-label">5 ★</span>
                        <div class="bar-container">
                            <div class="bar" style="width: @Model.ReviewDetails.FiveStarPercent%;"></div>
                        </div>
                        <span class="rating-percent">@Model.ReviewDetails.FiveStarPercent%</span>
                    </div>
                    <div class="rating-bar">
                        <span class="rating-label">4 ★</span>
                        <div class="bar-container">
                            <div class="bar" style="width: @Model.ReviewDetails.FourStarPercent%;"></div>
                        </div>
                        <span class="rating-percent">@Model.ReviewDetails.FourStarPercent%</span>
                    </div>
                    <div class="rating-bar">
                        <span class="rating-label">3 ★</span>
                        <div class="bar-container">
                            <div class="bar" style="width: @Model.ReviewDetails.ThreeStarPercent%;"></div>
                        </div>
                        <span class="rating-percent">@Model.ReviewDetails.ThreeStarPercent%</span>
                    </div>
                    <div class="rating-bar">
                        <span class="rating-label">2 ★</span>
                        <div class="bar-container">
                            <div class="bar" style="width: @Model.ReviewDetails.TwoStarPercent%;"></div>
                        </div>
                        <span class="rating-percent">@Model.ReviewDetails.TwoStarPercent%</span>
                    </div>
                    <div class="rating-bar">
                        <span class="rating-label">1 ★</span>
                        <div class="bar-container">
                            <div class="bar" style="width: @Model.ReviewDetails.OneStarPercent%;"></div>
                        </div>
                        <span class="rating-percent">@Model.ReviewDetails.OneStarPercent%</span>
                    </div>
                </div>
            </div>
            
            <div class="review-filters">
                <button class="filter-btn active">Tất cả (@Model.ReviewDetails.TotalReviews)</button>
                <button class="filter-btn">5 Sao (@Model.ReviewDetails.FiveStar)</button>
                <button class="filter-btn">4 Sao (@Model.ReviewDetails.FourStar)</button>
                <button class="filter-btn">3 Sao (@Model.ReviewDetails.ThreeStar)</button>
                <button class="filter-btn">2 Sao (@Model.ReviewDetails.TwoStar)</button>
                <button class="filter-btn">1 Sao (@Model.ReviewDetails.OneStar)</button>
            </div>
            
            <div class="review-list">
                @foreach(var review in Model.ReviewDetails.Reviews){
                    <div class="review-item">
                        <div class="reviewer-info">
                            <div class="reviewer-details">
                                <div class="reviewer-name">@review.Customer.Name</div>
                                <div class="review-date">@review.CreatedAt</div>
                            </div>
                        </div>
                        <div class="review-rating">
                            <div class="star-rating">★★★★★</div>
                        </div>
                        <div class="review-content">
                            <p>@review.Text</p>
                        </div>
                    </div>
                }
                
            </div>
            
            <div class="load-more">
                <button class="load-more-btn">Xem thêm đánh giá</button>
            </div>
        </div>
    </div>
</div>

<!-- Related Products -->
@* <div class="related-products">
    <div class="section-header">
        <h2 class="section-title">SẢN PHẨM TƯƠNG TỰ</h2>
        <a href="#" class="see-more">Xem Thêm</a>
    </div>
    
    <div class="products-container">
        <div class="navigation-arrow arrow-prev">
            <i class="fas fa-chevron-left"></i>
        </div>
        
        <!-- Related Product 1 -->
        <partial name="_ProductCardPartial" model='new {
            Id = 1,
            Rating = 4.8,
            Reviews = 275,
            IsNew = false,
            IsBestSeller = true, 
            Image = "~/assets/images/polo.png",
            Name = "Áo Polo Nam Pique Cotton",
            Price = 239000,
        }'/>
        
        <!-- Related Product 2 -->
        <partial name="_ProductCardPartial" model='new {
            Id = 1,
            Rating = 4.9,
            Reviews = 36,
            IsNew = true,
            IsBestSeller = false,
            Image = "~/assets/images/polo.png",
            Name = "Áo Thun Nam Cotton Compact",
            Price = 159000,
        }'/>
        
        <!-- Related Product 3 -->
        <partial name="_ProductCardPartial" model='new {
            Id = 1,
            Rating = 4.7,
            Reviews = 128,
            IsNew = false,
            IsBestSeller = false,
            Image = "~/assets/images/polo.png",
            Name = "Áo Thun Nam Premium Cotton",
            Price = 179000,
        }'/>
        
        <!-- Related Product 4 -->
        <partial name="_ProductCardPartial" model='new {
            Id = 1,
            Rating = 4.6,
            Reviews = 92,
            IsNew = false,
            IsBestSeller = true,
            Image = "~/assets/images/polo.png",
            Name = "Áo Thun Nam Cotton Mã Hóa Lông",
            Price = 199000,
        }'/>
        
        <!-- Related Product 5 -->
        <partial name="_ProductCardPartial" model='new {
            Id = 1,
            Rating = 4.8,
            Reviews = 183,
            IsNew = true,
            IsBestSeller = true,
            Image = "~/assets/images/polo.png",
            Name = "Áo Thun Nam Cotton Thêu Logo",
            Price = 189000,
        }'/>
        
        <div class="navigation-arrow arrow-next">
            <i class="fas fa-chevron-right"></i>
        </div>
    </div>

    <div id="cart-modal" class="cart-modal"></div>
        <div class="modal-content">
            <div id="success-message" class="modal-message success-message">
                <i class="fas fa-check-circle"></i>
                <p>Sản phẩm đã được thêm vào giỏ hàng!</p>
            </div>
            <div id="error-message" class="modal-message error-message">
                <i class="fas fa-exclamation-circle"></i>
                <p>Có lỗi xảy ra. Vui lòng thử lại sau!</p>
            </div>
        </div>
    </div>
</div> *@

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Thumbnail image handling
        const thumbnails = document.querySelectorAll('.thumbnail');
        const mainImage = document.getElementById('main-image');
        
        thumbnails.forEach(thumbnail => {
            thumbnail.addEventListener('click', function() {
                // Remove active class from all thumbnails
                thumbnails.forEach(t => t.classList.remove('active'));
                
                // Add active class to clicked thumbnail
                this.classList.add('active');
                
                // Update main image
                mainImage.src = this.getAttribute('data-img');
            });
        });
        
        
        // Color selection
        const colorOptions = document.querySelectorAll('.color-option');
        const selectedColorSpan = document.querySelector('.selected-color span');
        const sizeOptionsContainer = document.querySelector('.size-options');
        const variantIdInput = document.getElementById('variantIdInput');

        const variants = @Html.Raw(Json.Serialize(Model.Variants));

        function updateVariantId() {
            if (selectedColorId && selectedSizeId) {
                const matchingVariant = variants.find(variant =>
                    variant.color.id == selectedColorId && variant.size.id == selectedSizeId
                );

                if (matchingVariant) {
                    variantIdInput.value = matchingVariant.id; // Assign the matching variant's ID
                } else {
                    variantIdInput.value = ''; // Clear the value if no match is found
                }
            }
        }

        var selectedColorId = null;
        var selectedSizeId = null;
        
        colorOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Remove active class from all color options
                colorOptions.forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked color option
                this.classList.add('active');
                
                // Update selected color text
                selectedColorSpan.textContent = this.getAttribute('data-color');

                const sizes = JSON.parse(this.getAttribute('data-sizes'));

                sizeOptionsContainer.innerHTML = '';
                selectedColorId = this.getAttribute('id');

                sizes.forEach(size => {
                    const sizeOption = document.createElement('div');
                    sizeOption.classList.add('size-option');
                    sizeOption.setAttribute('data-size', size.Name);
                    sizeOption.setAttribute('data-size-id', size.Id);
                    sizeOption.textContent = size.Name;
                    sizeOptionsContainer.appendChild(sizeOption);
                });

                const selectedSizeSpan = document.querySelector('.selected-size span');
                const sizeOptions = document.querySelectorAll('.size-option');
                sizeOptions.forEach(sizeOption => {
                    sizeOption.addEventListener('click', function () {
                        // Handle size selection logic here
                        sizeOptions.forEach(s => s.classList.remove('active'));
                        this.classList.add('active');
                        selectedSizeSpan.textContent = this.getAttribute('data-size');

                        selectedSizeId = this.getAttribute('data-size-id');
                        updateVariantId();
                    });
                });
            });
        });
        
        // Quantity selector
        const decreaseBtn = document.querySelector('.decrease');
        const increaseBtn = document.querySelector('.increase');
        const quantityInput = document.querySelector('.quantity-input');
        
        decreaseBtn.addEventListener('click', function() {
            const currentValue = parseInt(quantityInput.value);
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        });
        
        increaseBtn.addEventListener('click', function() {
            const currentValue = parseInt(quantityInput.value);
            const maxValue = parseInt(quantityInput.getAttribute('max'));
            if (currentValue < maxValue) {
                quantityInput.value = currentValue + 1;
            }
        });

        const addToCartBtn = document.querySelector('.add-to-cart-btn');
        addToCartBtn.addEventListener('click', async function() {
            const isAuthenticatedInput = document.getElementById('isAuthenticated');
            if (isAuthenticatedInput.value == false) {
                window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.href);
                return;
            }
            if (!selectedColorId || !selectedSizeId) {
                alert('Vui lòng chọn màu sắc và kích thước');
                return;
            }
            const quantity = parseInt(quantityInput.value);
            const variantId = variantIdInput.value;
            const cartIdInput = document.getElementById('cartId');
            const cartId = cartIdInput.value;

            try {
                const response = await fetch('/Cart/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        cartId: cartId,
                        variantId: variantId,
                        quantity: quantity
                    })
                });

                const result = await response.json();
                
                // Show modal based on response
                const modal = document.getElementById('cart-modal');
                const successMessage = document.getElementById('success-message');
                const errorMessage = document.getElementById('error-message');
                
                // Hide both messages first
                successMessage.style.display = 'none';
                errorMessage.style.display = 'none';
                
                // Show appropriate message
                if (result.IsSuccess) {
                    successMessage.style.display = 'block';
                } else {
                    errorMessage.style.display = 'block';
                    // You can also show the specific error message if available
                    if (result.message) {
                        errorMessage.querySelector('p').textContent = result.message;
                    }
                }
                
                // Show modal
                modal.classList.add('show-modal');
                
                // Hide modal after 1 second
                setTimeout(() => {
                    modal.classList.add('fade-out');
                    setTimeout(() => {
                        modal.classList.remove('show-modal');
                        modal.classList.remove('fade-out');
                    }, 300);
                }, 1000);
                
            } 
            catch (error) {
                console.error('Error adding to cart:', error);
                
                // Show error modal for any JavaScript errors
                const modal = document.getElementById('cart-modal');
                const successMessage = document.getElementById('success-message');
                const errorMessage = document.getElementById('error-message');
                
                successMessage.style.display = 'none';
                errorMessage.style.display = 'block';
                errorMessage.querySelector('p').textContent = 'Có lỗi xảy ra. Vui lòng thử lại sau!';
                
                // Show modal
                modal.classList.add('show-modal');
                
                // Hide modal after 1 second
                setTimeout(() => {
                    modal.classList.add('fade-out');
                    setTimeout(() => {
                        modal.classList.remove('show-modal');
                        modal.classList.remove('fade-out');
                    }, 300);
                }, 1000);
            }
        
        });
        
        // Tabs
        const tabItems = document.querySelectorAll('.tab-item');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabItems.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs
                tabItems.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab
                this.classList.add('active');
                
                // Show corresponding tab content
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId).classList.add('active');
            });
        });
        
        // Related products carousel
        const productContainer = document.querySelector('.products-container');
        const prevButton = productContainer.querySelector('.arrow-prev');
        const nextButton = productContainer.querySelector('.arrow-next');
        
        prevButton.addEventListener('click', () => {
            productContainer.scrollBy({ left: -300, behavior: 'smooth' });
        });
        
        nextButton.addEventListener('click', () => {
            productContainer.scrollBy({ left: 300, behavior: 'smooth' });
        });
    });
</script>